from sha1 import *


def test_sha1():
    assert sha1('testing') == 'dc724af18fbdd4e59189f5fe768a5f8311527050' 
    assert sha1('hello world') == '2aae6c35c94fcfb415dbe95f408b9ce91ee846ed' 
    assert sha1('i am aezo') == '3086d27ebfcae148470268ad3523163e9d03fe23' 
    long_string = 'They wandered into a strange Tiki bar on the edge of the small beach town. He turned in the research paper on Friday; otherwise, he would have not passed the class. The teens wondered what was kept in the red shed on the far edge of the school grounds. If any cop asks you where you were, just say you were visiting Kansas. I honestly find her about as intimidating as a basket of kittens.'
    assert sha1(long_string) == '8afc8b20a83d3b76910b265e65df5a0ddc28932d' 

def test_truncate_front():
    assert truncate_front('1000123', 4) == '0123'

def test_binary_addition():
    assert binary_addition('00000000000000000000000000100000','00000000000000000000000001100100', 0) == bin(32 + 100)[2:]
    assert binary_addition('00000000000000000000000000100000','00000000000000000000000001100100', 32) == bin(32 + 100)[2:].zfill(32)
    assert binary_addition('111001111100101110111100001110001','00000000000000000000000101001101', 32) == bin(7777777777 + 333)[2:].zfill(32)

def test_left_rotate():
    assert left_rotate('111001111100101110111100001110001', 4) == '011111001011101111000011100011110'

def test_chunking():
    binary_string
    assert chunking(binary_string, 512) == ['11100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000', '11100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000111001111100101110111100001110001110011111001011101111000011100011100111110010111011110000111000']
    assert chunking(binary_string

def test_binary_pad():
    binary_pad(10, 10) == '0000001010'
    binary_pad(923823, 32) == '00000000000011100001100010101111'
    binary_pad(100000323245453453, 32) == '101100011010001011100001110100000011110000011000010001101'